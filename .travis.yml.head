matrix:
    include:
        - language: c
          os: linux
          dist: trusty
          env:
              global: >
                  JOB='Linux'
                  GENERATOR='Unix Makefiles'
                  CMAKE_FLAGS='-DPLATFORM_BUILD_SHARED=TRUE -DPLATFORM_ENABLE_DEBUG=FALSE'
                  BUILD_CMD='cmake --build . --target unit_test --config Debug'
                  OS=linux
                  UT=unit_test/unit_test
        - language: c
          os: linux
          dist: trusty
          language: c
          env:
              global: >
                  JOB='Linux'
                  GENERATOR='Unix Makefiles'
                  CMAKE_FLAGS='-DPLATFORM_BUILD_SHARED=TRUE -DPLATFORM_ENABLE_DEBUG=TRUE'
                  BUILD_CMD='cmake --build . --target unit_test --config Release'
                  OS=linux
                  UT=unit_test/unit_test
        - language: c
          os: osx
          osx_image: xcode7.3.1
          env:
              global: >
                  JOB='macOS Xcode7'
                  GENERATOR=Xcode
                  CMAKE_FLAGS='-DPLATFORM_BUILD_SHARED=FALSE -DPLATFORM_ENABLE_DEBUG=FALSE -DSANITIZE_ADDRESS=TRUE -DPLATFORM_ENABLE_MEMORY_TAG=TRUE'
                  BUILD_CMD='cmake --build . --target unit_test --config Debug'
                  OS=macos
                  UT=unit_test/Debug/unit_test
        - language: c
          os: osx
          osx_image: xcode8.3
          env:
              global: >
                  JOB='macOS Xcode8'
                  GENERATOR=Xcode
                  CMAKE_FLAGS='-DPLATFORM_BUILD_SHARED=FALSE -DPLATFORM_ENABLE_DEBUG=TRUE'
                  BUILD_CMD='cmake --build . --target unit_test --config Release'
                  OS=macos
                  UT=unit_test/Release/unit_test
        - language: c
          os: osx
          osx_image: xcode9
          env:
              global: >
                  JOB='macOS Xcode9'
                  GENERATOR=Xcode
                  CMAKE_FLAGS='-DPLATFORM_BUILD_SHARED=TRUE -DPLATFORM_ENABLE_DEBUG=FALSE -DSANITIZE_ADDRESS=TRUE -DPLATFORM_ENABLE_MEMORY_TAG=TRUE'
                  BUILD_CMD='cmake --build . --target unit_test --config Debug'
                  OS=macos
                  UT=unit_test/Debug/unit_test
        - language: c
          os: osx
          osx_image: xcode7.3.1
          env:
              global: >
                  JOB='iOS9 Xcode7'
                  GENERATOR=Xcode
                  CMAKE_FLAGS='-DPLATFORM_BUILD_SHARED=TRUE -DPLATFORM_ENABLE_DEBUG=TRUE'
                  CMAKE_FLAGS2='-DPLATFORM_IOS=TRUE -DPLATFORM_IOS_SIMULATOR=FALSE -DPLATFORM_ARM_ARCH=armv7'
                  BUILD_CMD='xcodebuild -project TitanSDK.xcodeproj -target unit_test -arch armv7 -sdk iphoneos9.3 -configuration Debug CODE_SIGN_IDENTITY= CODE_SIGNING_REQUIRED=NO'
                  OS=ios
                  UT=dummy
        - language: c
          os: osx
          osx_image: xcode8.3
          env:
              global: >
                  JOB='iOS10 Xcode8'
                  GENERATOR=Xcode
                  CMAKE_FLAGS='-DPLATFORM_BUILD_SHARED=TRUE -DPLATFORM_ENABLE_DEBUG=FALSE'
                  CMAKE_FLAGS2='-DPLATFORM_IOS=TRUE -DPLATFORM_IOS_SIMULATOR=FALSE -DPLATFORM_ARM_ARCH=armv7s'
                  BUILD_CMD='xcodebuild -project TitanSDK.xcodeproj -target unit_test -arch armv7s -sdk iphoneos10.3 -configuration Release CODE_SIGN_IDENTITY= CODE_SIGNING_REQUIRED=NO'
                  OS=ios
                  UT=dummy
        - language: c
          os: osx
          osx_image: xcode9
          env:
              global: >
                  JOB='iOS11 Xcode9'
                  GENERATOR=Xcode
                  CMAKE_FLAGS='-DPLATFORM_BUILD_SHARED=FALSE -DPLATFORM_ENABLE_DEBUG=TRUE'
                  CMAKE_FLAGS2='-DPLATFORM_IOS=TRUE -DPLATFORM_IOS_SIMULATOR=FALSE -DPLATFORM_ARM_ARCH=arm64'
                  BUILD_CMD='xcodebuild -project TitanSDK.xcodeproj -target unit_test -arch arm64 -sdk iphoneos11.0 -configuration Debug CODE_SIGN_IDENTITY= CODE_SIGNING_REQUIRED=NO'
                  OS=ios
                  UT=dummy
        - language: c
          os: osx
          osx_image: xcode8.3
          env:
              global: >
                  JOB='Simulator iOS10 Xcode8'
                  GENERATOR=Xcode
                  CMAKE_FLAGS='-DPLATFORM_BUILD_SHARED=FALSE -DPLATFORM_ENABLE_DEBUG=TRUE'
                  CMAKE_FLAGS2='-DPLATFORM_IOS=TRUE -DPLATFORM_IOS_SIMULATOR=TRUE'
                  BUILD_CMD='xcodebuild -project TitanSDK.xcodeproj -target unit_test -arch x86_64 -sdk iphonesimulator10.3 -configuration Debug'
                  OS=ios-simulator
                  UT=unit_test/Debug-iphonesimulator/unit_test.app
        - language: c
          os: linux
          dist: trusty
          env:
              global: >
                  JOB='Android Build'
                  OS=android
        - language: android
          dist: trusty
          android:
              components:
                  - tools
                  - platform-tools
                  - tools
                  - build-tools-25.0.0
                  - android-21
                  - extra
                  - sys-img-armeabi-v7a-android-21
          env:
              global: >
                  JOB='Android Simulator'
                  GENERATOR='Unix Makefiles'
                  CMAKE_FLAGS='-DCMAKE_TOOLCHAIN_FILE=toolchain.cmake -DPLATFORM_ENABLE_DEBUG=TRUE -DPLATFORM_UNIT_TEST_LITE=TRUE'
                  BUILD_CMD='cmake --build . --target platform --config Debug'
                  OS=android-simulator
                  UT=dummy

before_install:
    - |
      if [ "${OS}" == "android" ]
      then
          wget -q https://cmake.org/files/v3.9/cmake-3.9.1-Linux-x86_64.sh && \
          yes | sh cmake-3.9.1-Linux-x86_64.sh > /dev/null || \
          exit -1
          PATH=$(pwd)/cmake-3.9.1-Linux-x86_64/bin:${PATH}
          cmake --version

          export NDK=android-ndk-r14b
          wget -q https://dl.google.com/android/repository/${NDK}-linux-x86_64.zip && \
          unzip -oqq ${NDK}-linux-x86_64.zip || \
          exit -1
          
          function android_compile {
              echo "set(CMAKE_SYSTEM_NAME Android)" > toolchain.cmake &&
              echo "set(CMAKE_SYSTEM_VERSION $1)" >> toolchain.cmake &&
              echo "set(CMAKE_ANDROID_ARCH_ABI $2)" >> toolchain.cmake &&
              echo "set(CMAKE_ANDROID_NDK \"$(pwd)/${NDK}\")" >> toolchain.cmake
              
              mkdir titansdk_build
              cd titansdk_build
              cmake -G "Unix Makefiles" -DCMAKE_TOOLCHAIN_FILE=toolchain.cmake $3 .. && \
              cmake --build . --target platform --config $4 && \
              cd .. && \
              rm -rf titansdk_build || \
              return -1
              
              return 0
          }
          
          echo ====================================
          echo android: 21
          echo abi: x86
          echo ====================================
          android_compile 21 x86 "-DPLATFORM_BUILD_SHARED=FALSE -DPLATFORM_ENABLE_DEBUG=TRUE" Debug

          echo ====================================
          echo android: 21
          echo abi: x86_64
          echo ====================================
          android_compile 21 x86_64 "-DPLATFORM_BUILD_SHARED=FALSE -DPLATFORM_ENABLE_DEBUG=TRUE" Debug

          echo ====================================
          echo android: 21
          echo abi: armeabi
          echo ====================================
          android_compile 21 armeabi "-DPLATFORM_BUILD_SHARED=TRUE -DPLATFORM_ENABLE_DEBUG=FALSE" Release

          echo ====================================
          echo android: 21
          echo abi: arm64-v8a
          echo ====================================
          android_compile 21 arm64-v8a "-DPLATFORM_BUILD_SHARED=TRUE -DPLATFORM_ENABLE_DEBUG=TRUE" Release

          echo ====================================
          echo android: 24
          echo abi: x86
          echo ====================================
          android_compile 24 x86 "-DPLATFORM_BUILD_SHARED=TRUE -DPLATFORM_ENABLE_DEBUG=FALSE" Release

          echo ====================================
          echo android: 24
          echo abi: x86_64
          echo ====================================
          android_compile 24 x86_64 "-DPLATFORM_BUILD_SHARED=TRUE -DPLATFORM_ENABLE_DEBUG=FALSE" Release

          echo ====================================
          echo android: 24
          echo abi: armeabi
          echo ====================================
          android_compile 24 armeabi "-DPLATFORM_BUILD_SHARED=FALSE -DPLATFORM_ENABLE_DEBUG=TRUE" Debug

          echo ====================================
          echo android: 24
          echo abi: arm64-v8a
          echo ====================================
          android_compile 24 arm64-v8a "-DPLATFORM_BUILD_SHARED=FALSE -DPLATFORM_ENABLE_DEBUG=FALSE" Debug
      fi
    - |
      if [ "${OS}" == "android-simulator" ]
      then
          wget -q https://cmake.org/files/v3.9/cmake-3.9.1-Linux-x86_64.sh && \
          yes | sh cmake-3.9.1-Linux-x86_64.sh > /dev/null || \
          exit -1
          PATH=$(pwd)/cmake-3.9.1-Linux-x86_64/bin:${PATH}
          cmake --version

          export NDK=android-ndk-r14b
          wget -q https://dl.google.com/android/repository/${NDK}-linux-x86_64.zip && \
          unzip -oqq ${NDK}-linux-x86_64.zip || \
          exit -1

          echo "set(CMAKE_SYSTEM_NAME Android)" > toolchain.cmake &&
          echo "set(CMAKE_SYSTEM_VERSION 21)" >> toolchain.cmake &&
          echo "set(CMAKE_ANDROID_ARCH_ABI armeabi-v7a)" >> toolchain.cmake &&
          echo "set(CMAKE_ANDROID_NDK \"$(pwd)/${NDK}\")" >> toolchain.cmake

          echo yes | sdkmanager "extras;m2repository;com;android;support;constraint;constraint-layout;1.0.2"
          echo yes | sdkmanager "extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.2"
      fi

install:
    - if [ "${OS}" == "android" ]; then exit 0; fi
    - mkdir titansdk_build
    - cd titansdk_build
    - cmake -G "${GENERATOR}" ${CMAKE_FLAGS} ..
    - |
      if [ ! -z "${CMAKE_FLAGS2}" ]
      then
          cmake -G "${GENERATOR}" ${CMAKE_FLAGS2} ..
      fi
    - ${BUILD_CMD}
    - |
      if [ ${OS} == "ios-simulator" ]
      then
          export DEV=$(xcrun simctl create test_iphone7 com.apple.CoreSimulator.SimDeviceType.iPhone-7 com.apple.CoreSimulator.SimRuntime.iOS-10-3) && \
          xcrun simctl boot ${DEV} && \
          xcrun simctl install ${DEV} ${UT}
      fi
    - |
      if [ ${OS} == "android-simulator" ]
      then
          cp -r ../program/android_lib_unit_test/ ./
          cp output/platform/0.2.0/debug/shared/libplatform.so android_lib_unit_test/TitanSDKUnitTest/app/src/main/jniLibs/armeabi-v7a/ || exit -1

          cd android_lib_unit_test/TitanSDKUnitTest && \
          ./gradlew clean assembleDebug && \
          cd - || \
          exit -1
  
          echo no | android create avd --force --name ut --target android-21 --abi armeabi-v7a || exit -1
          emulator -avd ut -no-audio -no-window &
          android-wait-for-emulator
          adb shell echo echo from adb shell!!!
          adb install android_lib_unit_test/TitanSDKUnitTest/app/build/outputs/apk/app-debug.apk || exit -1
      fi

script:
    - cp ../misc/run_case.sh ./run_case.sh
    - chmod u+x run_case.sh
